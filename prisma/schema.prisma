generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN 
  USER
}

model User {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String @unique
  bio                   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole @default(USER)
  isTwoFactorEnabled    Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  following             Follow[] @relation("UserFollowing")
  followers             Follow[] @relation("UserFollowers")
  
  accounts              Account[]
  articles              Article[]
  comments              Comment[]
  likes                 Like[]
  favorites             Favorite[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model VerificationToken{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])

}
model PasswordResetToken{
  id      String @id @default(auto()) @map("_id") @db.ObjectId  
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])

}
model TwoFactorToken{
  id      String @id @default(auto()) @map("_id") @db.ObjectId  
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete:Cascade)

  @@unique([userId])
}

model Article {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  editorData      Json
  previewSubtitle String?
  isPublished     Boolean @default(false)
  views           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())
  readTime        Int 
  image           String?

  categoryId  String?   @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments    Comment[]
  likes       Like[]
  favorite    Favorite[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String?

  articles    Article[]
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  createdAt   DateTime @default(now())

  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  articleId   String   @db.ObjectId
  article     Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
}
model Like {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  likeCount   Int      @default(1)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  articleId   String   @db.ObjectId
  article     Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Favorite {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  error       String?
  success     String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  articleId   String   @db.ObjectId
  article     Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())

  followerId  String   @db.ObjectId
  follower    User      @relation("UserFollowing", fields: [followerId], references: [id])

  followedById String   @db.ObjectId
  followedBy  User      @relation("UserFollowers", fields: [followedById], references: [id])
}

 